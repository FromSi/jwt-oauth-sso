// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/services (interfaces: QueryUserService)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/services/mock_query_user_service.go -package=services_mocks github.com/fromsi/jwt-oauth-sso/internal/services QueryUserService
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryUserService is a mock of QueryUserService interface.
type MockQueryUserService struct {
	ctrl     *gomock.Controller
	recorder *MockQueryUserServiceMockRecorder
	isgomock struct{}
}

// MockQueryUserServiceMockRecorder is the mock recorder for MockQueryUserService.
type MockQueryUserServiceMockRecorder struct {
	mock *MockQueryUserService
}

// NewMockQueryUserService creates a new mock instance.
func NewMockQueryUserService(ctrl *gomock.Controller) *MockQueryUserService {
	mock := &MockQueryUserService{ctrl: ctrl}
	mock.recorder = &MockQueryUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryUserService) EXPECT() *MockQueryUserServiceMockRecorder {
	return m.recorder
}

// CheckPasswordByHashAndPassword mocks base method.
func (m *MockQueryUserService) CheckPasswordByHashAndPassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordByHashAndPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPasswordByHashAndPassword indicates an expected call of CheckPasswordByHashAndPassword.
func (mr *MockQueryUserServiceMockRecorder) CheckPasswordByHashAndPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordByHashAndPassword", reflect.TypeOf((*MockQueryUserService)(nil).CheckPasswordByHashAndPassword), arg0, arg1)
}

// GenerateUUID mocks base method.
func (m *MockQueryUserService) GenerateUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockQueryUserServiceMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockQueryUserService)(nil).GenerateUUID))
}

// HashPassword mocks base method.
func (m *MockQueryUserService) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockQueryUserServiceMockRecorder) HashPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockQueryUserService)(nil).HashPassword), arg0)
}
