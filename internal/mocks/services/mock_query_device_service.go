// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/services (interfaces: QueryDeviceService)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/services/mock_query_device_service.go -package=services_mocks github.com/fromsi/jwt-oauth-sso/internal/services QueryDeviceService
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	reflect "reflect"

	configs "github.com/fromsi/jwt-oauth-sso/internal/configs"
	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryDeviceService is a mock of QueryDeviceService interface.
type MockQueryDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockQueryDeviceServiceMockRecorder
	isgomock struct{}
}

// MockQueryDeviceServiceMockRecorder is the mock recorder for MockQueryDeviceService.
type MockQueryDeviceServiceMockRecorder struct {
	mock *MockQueryDeviceService
}

// NewMockQueryDeviceService creates a new mock instance.
func NewMockQueryDeviceService(ctrl *gomock.Controller) *MockQueryDeviceService {
	mock := &MockQueryDeviceService{ctrl: ctrl}
	mock.recorder = &MockQueryDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryDeviceService) EXPECT() *MockQueryDeviceServiceMockRecorder {
	return m.recorder
}

// GenerateRefreshToken mocks base method.
func (m *MockQueryDeviceService) GenerateRefreshToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockQueryDeviceServiceMockRecorder) GenerateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockQueryDeviceService)(nil).GenerateRefreshToken))
}

// GenerateUUID mocks base method.
func (m *MockQueryDeviceService) GenerateUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockQueryDeviceServiceMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockQueryDeviceService)(nil).GenerateUUID))
}

// GetNewDeviceByUserUUIDAndIpAndUserAgent mocks base method.
func (m *MockQueryDeviceService) GetNewDeviceByUserUUIDAndIpAndUserAgent(arg0 configs.TokenConfig, arg1, arg2, arg3 string) repositories.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewDeviceByUserUUIDAndIpAndUserAgent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(repositories.Device)
	return ret0
}

// GetNewDeviceByUserUUIDAndIpAndUserAgent indicates an expected call of GetNewDeviceByUserUUIDAndIpAndUserAgent.
func (mr *MockQueryDeviceServiceMockRecorder) GetNewDeviceByUserUUIDAndIpAndUserAgent(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewDeviceByUserUUIDAndIpAndUserAgent", reflect.TypeOf((*MockQueryDeviceService)(nil).GetNewDeviceByUserUUIDAndIpAndUserAgent), arg0, arg1, arg2, arg3)
}
