// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/services (interfaces: DeviceService)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/services/mock_device_service.go -package=services_mocks github.com/fromsi/jwt-oauth-sso/internal/services DeviceService
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	reflect "reflect"

	configs "github.com/fromsi/jwt-oauth-sso/internal/configs"
	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceService is a mock of DeviceService interface.
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
	isgomock struct{}
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService.
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance.
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// GenerateRefreshToken mocks base method.
func (m *MockDeviceService) GenerateRefreshToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockDeviceServiceMockRecorder) GenerateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockDeviceService)(nil).GenerateRefreshToken))
}

// GenerateUUID mocks base method.
func (m *MockDeviceService) GenerateUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockDeviceServiceMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockDeviceService)(nil).GenerateUUID))
}

// GetDeviceByUserUUIDAndIpAndAgent mocks base method.
func (m *MockDeviceService) GetDeviceByUserUUIDAndIpAndAgent(arg0 configs.TokenConfig, arg1, arg2, arg3 string) repositories.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByUserUUIDAndIpAndAgent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(repositories.Device)
	return ret0
}

// GetDeviceByUserUUIDAndIpAndAgent indicates an expected call of GetDeviceByUserUUIDAndIpAndAgent.
func (mr *MockDeviceServiceMockRecorder) GetDeviceByUserUUIDAndIpAndAgent(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByUserUUIDAndIpAndAgent", reflect.TypeOf((*MockDeviceService)(nil).GetDeviceByUserUUIDAndIpAndAgent), arg0, arg1, arg2, arg3)
}
