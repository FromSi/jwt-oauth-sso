// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: MutableUser)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/repositories/mock_mutable_user.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories MutableUser
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMutableUser is a mock of MutableUser interface.
type MockMutableUser struct {
	ctrl     *gomock.Controller
	recorder *MockMutableUserMockRecorder
	isgomock struct{}
}

// MockMutableUserMockRecorder is the mock recorder for MockMutableUser.
type MockMutableUserMockRecorder struct {
	mock *MockMutableUser
}

// NewMockMutableUser creates a new mock instance.
func NewMockMutableUser(ctrl *gomock.Controller) *MockMutableUser {
	mock := &MockMutableUser{ctrl: ctrl}
	mock.recorder = &MockMutableUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableUser) EXPECT() *MockMutableUserMockRecorder {
	return m.recorder
}

// SetCreatedAt mocks base method.
func (m *MockMutableUser) SetCreatedAt(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreatedAt", arg0)
}

// SetCreatedAt indicates an expected call of SetCreatedAt.
func (mr *MockMutableUserMockRecorder) SetCreatedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatedAt", reflect.TypeOf((*MockMutableUser)(nil).SetCreatedAt), arg0)
}

// SetEmail mocks base method.
func (m *MockMutableUser) SetEmail(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEmail", arg0)
}

// SetEmail indicates an expected call of SetEmail.
func (mr *MockMutableUserMockRecorder) SetEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmail", reflect.TypeOf((*MockMutableUser)(nil).SetEmail), arg0)
}

// SetPassword mocks base method.
func (m *MockMutableUser) SetPassword(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPassword", arg0)
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockMutableUserMockRecorder) SetPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockMutableUser)(nil).SetPassword), arg0)
}

// SetUUID mocks base method.
func (m *MockMutableUser) SetUUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUUID", arg0)
}

// SetUUID indicates an expected call of SetUUID.
func (mr *MockMutableUserMockRecorder) SetUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUUID", reflect.TypeOf((*MockMutableUser)(nil).SetUUID), arg0)
}

// SetUpdatedAt mocks base method.
func (m *MockMutableUser) SetUpdatedAt(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpdatedAt", arg0)
}

// SetUpdatedAt indicates an expected call of SetUpdatedAt.
func (mr *MockMutableUserMockRecorder) SetUpdatedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatedAt", reflect.TypeOf((*MockMutableUser)(nil).SetUpdatedAt), arg0)
}
