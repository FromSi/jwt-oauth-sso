// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: UserRepository)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/repositories/mock_user_repository.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories UserRepository
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 repositories.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(arg0 string) repositories.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(repositories.User)
	return ret0
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), arg0)
}

// HasUserByEmail mocks base method.
func (m *MockUserRepository) HasUserByEmail(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserByEmail", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUserByEmail indicates an expected call of HasUserByEmail.
func (mr *MockUserRepositoryMockRecorder) HasUserByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).HasUserByEmail), arg0)
}

// HasUserByUUID mocks base method.
func (m *MockUserRepository) HasUserByUUID(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserByUUID", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUserByUUID indicates an expected call of HasUserByUUID.
func (mr *MockUserRepositoryMockRecorder) HasUserByUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserByUUID", reflect.TypeOf((*MockUserRepository)(nil).HasUserByUUID), arg0)
}

// HasUserByUUIDAndPassword mocks base method.
func (m *MockUserRepository) HasUserByUUIDAndPassword(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserByUUIDAndPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUserByUUIDAndPassword indicates an expected call of HasUserByUUIDAndPassword.
func (mr *MockUserRepositoryMockRecorder) HasUserByUUIDAndPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserByUUIDAndPassword", reflect.TypeOf((*MockUserRepository)(nil).HasUserByUUIDAndPassword), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(uuid, password string, updatedAt int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", uuid, password, updatedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(uuid, password, updatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), uuid, password, updatedAt)
}
