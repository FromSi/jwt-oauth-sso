// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/services (interfaces: UserService)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/mock_user_service.go -package=services_mocks github.com/fromsi/jwt-oauth-sso/internal/services UserService
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CheckHashedPasswordAndNativePassword mocks base method.
func (m *MockUserService) CheckHashedPasswordAndNativePassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHashedPasswordAndNativePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHashedPasswordAndNativePassword indicates an expected call of CheckHashedPasswordAndNativePassword.
func (mr *MockUserServiceMockRecorder) CheckHashedPasswordAndNativePassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHashedPasswordAndNativePassword", reflect.TypeOf((*MockUserService)(nil).CheckHashedPasswordAndNativePassword), arg0, arg1)
}

// CreateUserByUUIDAndEmailAndHashedPassword mocks base method.
func (m *MockUserService) CreateUserByUUIDAndEmailAndHashedPassword(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserByUUIDAndEmailAndHashedPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserByUUIDAndEmailAndHashedPassword indicates an expected call of CreateUserByUUIDAndEmailAndHashedPassword.
func (mr *MockUserServiceMockRecorder) CreateUserByUUIDAndEmailAndHashedPassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserByUUIDAndEmailAndHashedPassword", reflect.TypeOf((*MockUserService)(nil).CreateUserByUUIDAndEmailAndHashedPassword), arg0, arg1, arg2)
}

// GenerateUUID mocks base method.
func (m *MockUserService) GenerateUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockUserServiceMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockUserService)(nil).GenerateUUID))
}

// HashPassword mocks base method.
func (m *MockUserService) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockUserServiceMockRecorder) HashPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockUserService)(nil).HashPassword), arg0)
}

// UpdatePasswordByUUIDAndHashedPassword mocks base method.
func (m *MockUserService) UpdatePasswordByUUIDAndHashedPassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByUUIDAndHashedPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByUUIDAndHashedPassword indicates an expected call of UpdatePasswordByUUIDAndHashedPassword.
func (mr *MockUserServiceMockRecorder) UpdatePasswordByUUIDAndHashedPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByUUIDAndHashedPassword", reflect.TypeOf((*MockUserService)(nil).UpdatePasswordByUUIDAndHashedPassword), arg0, arg1)
}
