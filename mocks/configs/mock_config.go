// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/configs (interfaces: Config)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/configs/mock_config.go -package=configs_mocks github.com/fromsi/jwt-oauth-sso/internal/configs Config
//

// Package configs_mocks is a generated GoMock package.
package configs_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetAudienceName mocks base method.
func (m *MockConfig) GetAudienceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAudienceName indicates an expected call of GetAudienceName.
func (mr *MockConfigMockRecorder) GetAudienceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceName", reflect.TypeOf((*MockConfig)(nil).GetAudienceName))
}

// GetDebug mocks base method.
func (m *MockConfig) GetDebug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetDebug indicates an expected call of GetDebug.
func (mr *MockConfigMockRecorder) GetDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebug", reflect.TypeOf((*MockConfig)(nil).GetDebug))
}

// GetDsn mocks base method.
func (m *MockConfig) GetDsn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDsn")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDsn indicates an expected call of GetDsn.
func (mr *MockConfigMockRecorder) GetDsn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDsn", reflect.TypeOf((*MockConfig)(nil).GetDsn))
}

// GetExpirationAccessInMinutes mocks base method.
func (m *MockConfig) GetExpirationAccessInMinutes() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpirationAccessInMinutes")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpirationAccessInMinutes indicates an expected call of GetExpirationAccessInMinutes.
func (mr *MockConfigMockRecorder) GetExpirationAccessInMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpirationAccessInMinutes", reflect.TypeOf((*MockConfig)(nil).GetExpirationAccessInMinutes))
}

// GetExpirationRefreshInDays mocks base method.
func (m *MockConfig) GetExpirationRefreshInDays() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpirationRefreshInDays")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpirationRefreshInDays indicates an expected call of GetExpirationRefreshInDays.
func (mr *MockConfigMockRecorder) GetExpirationRefreshInDays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpirationRefreshInDays", reflect.TypeOf((*MockConfig)(nil).GetExpirationRefreshInDays))
}

// GetExpirationResetInDays mocks base method.
func (m *MockConfig) GetExpirationResetInDays() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpirationResetInDays")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpirationResetInDays indicates an expected call of GetExpirationResetInDays.
func (mr *MockConfigMockRecorder) GetExpirationResetInDays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpirationResetInDays", reflect.TypeOf((*MockConfig)(nil).GetExpirationResetInDays))
}

// GetHost mocks base method.
func (m *MockConfig) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockConfigMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockConfig)(nil).GetHost))
}

// GetIssuerName mocks base method.
func (m *MockConfig) GetIssuerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuerName indicates an expected call of GetIssuerName.
func (mr *MockConfigMockRecorder) GetIssuerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuerName", reflect.TypeOf((*MockConfig)(nil).GetIssuerName))
}

// GetName mocks base method.
func (m *MockConfig) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockConfigMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockConfig)(nil).GetName))
}

// GetPort mocks base method.
func (m *MockConfig) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockConfig)(nil).GetPort))
}

// GetSecretKey mocks base method.
func (m *MockConfig) GetSecretKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSecretKey indicates an expected call of GetSecretKey.
func (mr *MockConfigMockRecorder) GetSecretKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockConfig)(nil).GetSecretKey))
}
