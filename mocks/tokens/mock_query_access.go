// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/tokens (interfaces: QueryAccessToken)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/tokens/mock_query_access.go -package=tokens_mocks github.com/fromsi/jwt-oauth-sso/internal/tokens QueryAccessToken
//

// Package tokens_mocks is a generated GoMock package.
package tokens_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryAccessToken is a mock of QueryAccessToken interface.
type MockQueryAccessToken struct {
	ctrl     *gomock.Controller
	recorder *MockQueryAccessTokenMockRecorder
	isgomock struct{}
}

// MockQueryAccessTokenMockRecorder is the mock recorder for MockQueryAccessToken.
type MockQueryAccessTokenMockRecorder struct {
	mock *MockQueryAccessToken
}

// NewMockQueryAccessToken creates a new mock instance.
func NewMockQueryAccessToken(ctrl *gomock.Controller) *MockQueryAccessToken {
	mock := &MockQueryAccessToken{ctrl: ctrl}
	mock.recorder = &MockQueryAccessTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryAccessToken) EXPECT() *MockQueryAccessTokenMockRecorder {
	return m.recorder
}

// GetAudience mocks base method.
func (m *MockQueryAccessToken) GetAudience() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudience")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAudience indicates an expected call of GetAudience.
func (mr *MockQueryAccessTokenMockRecorder) GetAudience() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudience", reflect.TypeOf((*MockQueryAccessToken)(nil).GetAudience))
}

// GetDeviceUUID mocks base method.
func (m *MockQueryAccessToken) GetDeviceUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceUUID indicates an expected call of GetDeviceUUID.
func (mr *MockQueryAccessTokenMockRecorder) GetDeviceUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUUID", reflect.TypeOf((*MockQueryAccessToken)(nil).GetDeviceUUID))
}

// GetDeviceUserAgent mocks base method.
func (m *MockQueryAccessToken) GetDeviceUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceUserAgent indicates an expected call of GetDeviceUserAgent.
func (mr *MockQueryAccessTokenMockRecorder) GetDeviceUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUserAgent", reflect.TypeOf((*MockQueryAccessToken)(nil).GetDeviceUserAgent))
}

// GetExpirationTime mocks base method.
func (m *MockQueryAccessToken) GetExpirationTime() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpirationTime")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpirationTime indicates an expected call of GetExpirationTime.
func (mr *MockQueryAccessTokenMockRecorder) GetExpirationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpirationTime", reflect.TypeOf((*MockQueryAccessToken)(nil).GetExpirationTime))
}

// GetIssuedAt mocks base method.
func (m *MockQueryAccessToken) GetIssuedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetIssuedAt indicates an expected call of GetIssuedAt.
func (mr *MockQueryAccessTokenMockRecorder) GetIssuedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedAt", reflect.TypeOf((*MockQueryAccessToken)(nil).GetIssuedAt))
}

// GetIssuer mocks base method.
func (m *MockQueryAccessToken) GetIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockQueryAccessTokenMockRecorder) GetIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockQueryAccessToken)(nil).GetIssuer))
}

// GetSubject mocks base method.
func (m *MockQueryAccessToken) GetSubject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockQueryAccessTokenMockRecorder) GetSubject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockQueryAccessToken)(nil).GetSubject))
}

// ToString mocks base method.
func (m *MockQueryAccessToken) ToString() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToString indicates an expected call of ToString.
func (mr *MockQueryAccessTokenMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockQueryAccessToken)(nil).ToString))
}
