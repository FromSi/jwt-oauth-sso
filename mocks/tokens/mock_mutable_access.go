// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/tokens (interfaces: MutableAccessToken)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/tokens/mock_mutable_access.go -package=tokens_mocks github.com/fromsi/jwt-oauth-sso/internal/tokens MutableAccessToken
//

// Package tokens_mocks is a generated GoMock package.
package tokens_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMutableAccessToken is a mock of MutableAccessToken interface.
type MockMutableAccessToken struct {
	ctrl     *gomock.Controller
	recorder *MockMutableAccessTokenMockRecorder
	isgomock struct{}
}

// MockMutableAccessTokenMockRecorder is the mock recorder for MockMutableAccessToken.
type MockMutableAccessTokenMockRecorder struct {
	mock *MockMutableAccessToken
}

// NewMockMutableAccessToken creates a new mock instance.
func NewMockMutableAccessToken(ctrl *gomock.Controller) *MockMutableAccessToken {
	mock := &MockMutableAccessToken{ctrl: ctrl}
	mock.recorder = &MockMutableAccessTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableAccessToken) EXPECT() *MockMutableAccessTokenMockRecorder {
	return m.recorder
}

// SetAudience mocks base method.
func (m *MockMutableAccessToken) SetAudience(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAudience", arg0)
}

// SetAudience indicates an expected call of SetAudience.
func (mr *MockMutableAccessTokenMockRecorder) SetAudience(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAudience", reflect.TypeOf((*MockMutableAccessToken)(nil).SetAudience), arg0)
}

// SetDeviceUUID mocks base method.
func (m *MockMutableAccessToken) SetDeviceUUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceUUID", arg0)
}

// SetDeviceUUID indicates an expected call of SetDeviceUUID.
func (mr *MockMutableAccessTokenMockRecorder) SetDeviceUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceUUID", reflect.TypeOf((*MockMutableAccessToken)(nil).SetDeviceUUID), arg0)
}

// SetDeviceUserAgent mocks base method.
func (m *MockMutableAccessToken) SetDeviceUserAgent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceUserAgent", arg0)
}

// SetDeviceUserAgent indicates an expected call of SetDeviceUserAgent.
func (mr *MockMutableAccessTokenMockRecorder) SetDeviceUserAgent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceUserAgent", reflect.TypeOf((*MockMutableAccessToken)(nil).SetDeviceUserAgent), arg0)
}

// SetExpirationTime mocks base method.
func (m *MockMutableAccessToken) SetExpirationTime(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExpirationTime", arg0)
}

// SetExpirationTime indicates an expected call of SetExpirationTime.
func (mr *MockMutableAccessTokenMockRecorder) SetExpirationTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpirationTime", reflect.TypeOf((*MockMutableAccessToken)(nil).SetExpirationTime), arg0)
}

// SetIssuedAt mocks base method.
func (m *MockMutableAccessToken) SetIssuedAt(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIssuedAt", arg0)
}

// SetIssuedAt indicates an expected call of SetIssuedAt.
func (mr *MockMutableAccessTokenMockRecorder) SetIssuedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuedAt", reflect.TypeOf((*MockMutableAccessToken)(nil).SetIssuedAt), arg0)
}

// SetIssuer mocks base method.
func (m *MockMutableAccessToken) SetIssuer(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIssuer", arg0)
}

// SetIssuer indicates an expected call of SetIssuer.
func (mr *MockMutableAccessTokenMockRecorder) SetIssuer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuer", reflect.TypeOf((*MockMutableAccessToken)(nil).SetIssuer), arg0)
}

// SetSubject mocks base method.
func (m *MockMutableAccessToken) SetSubject(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubject", arg0)
}

// SetSubject indicates an expected call of SetSubject.
func (mr *MockMutableAccessTokenMockRecorder) SetSubject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubject", reflect.TypeOf((*MockMutableAccessToken)(nil).SetSubject), arg0)
}
