// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/tokens (interfaces: AccessToken)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/tokens/mock_access.go -package=tokens_mocks github.com/fromsi/jwt-oauth-sso/internal/tokens AccessToken
//

// Package tokens_mocks is a generated GoMock package.
package tokens_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccessToken is a mock of AccessToken interface.
type MockAccessToken struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenMockRecorder
	isgomock struct{}
}

// MockAccessTokenMockRecorder is the mock recorder for MockAccessToken.
type MockAccessTokenMockRecorder struct {
	mock *MockAccessToken
}

// NewMockAccessToken creates a new mock instance.
func NewMockAccessToken(ctrl *gomock.Controller) *MockAccessToken {
	mock := &MockAccessToken{ctrl: ctrl}
	mock.recorder = &MockAccessTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessToken) EXPECT() *MockAccessTokenMockRecorder {
	return m.recorder
}

// GetAudience mocks base method.
func (m *MockAccessToken) GetAudience() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudience")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAudience indicates an expected call of GetAudience.
func (mr *MockAccessTokenMockRecorder) GetAudience() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudience", reflect.TypeOf((*MockAccessToken)(nil).GetAudience))
}

// GetDeviceUUID mocks base method.
func (m *MockAccessToken) GetDeviceUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceUUID indicates an expected call of GetDeviceUUID.
func (mr *MockAccessTokenMockRecorder) GetDeviceUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUUID", reflect.TypeOf((*MockAccessToken)(nil).GetDeviceUUID))
}

// GetDeviceUserAgent mocks base method.
func (m *MockAccessToken) GetDeviceUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceUserAgent indicates an expected call of GetDeviceUserAgent.
func (mr *MockAccessTokenMockRecorder) GetDeviceUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUserAgent", reflect.TypeOf((*MockAccessToken)(nil).GetDeviceUserAgent))
}

// GetExpirationTime mocks base method.
func (m *MockAccessToken) GetExpirationTime() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpirationTime")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpirationTime indicates an expected call of GetExpirationTime.
func (mr *MockAccessTokenMockRecorder) GetExpirationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpirationTime", reflect.TypeOf((*MockAccessToken)(nil).GetExpirationTime))
}

// GetIssuedAt mocks base method.
func (m *MockAccessToken) GetIssuedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetIssuedAt indicates an expected call of GetIssuedAt.
func (mr *MockAccessTokenMockRecorder) GetIssuedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedAt", reflect.TypeOf((*MockAccessToken)(nil).GetIssuedAt))
}

// GetIssuer mocks base method.
func (m *MockAccessToken) GetIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockAccessTokenMockRecorder) GetIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockAccessToken)(nil).GetIssuer))
}

// GetSubject mocks base method.
func (m *MockAccessToken) GetSubject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockAccessTokenMockRecorder) GetSubject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockAccessToken)(nil).GetSubject))
}

// SetAudience mocks base method.
func (m *MockAccessToken) SetAudience(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAudience", arg0)
}

// SetAudience indicates an expected call of SetAudience.
func (mr *MockAccessTokenMockRecorder) SetAudience(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAudience", reflect.TypeOf((*MockAccessToken)(nil).SetAudience), arg0)
}

// SetDeviceUUID mocks base method.
func (m *MockAccessToken) SetDeviceUUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceUUID", arg0)
}

// SetDeviceUUID indicates an expected call of SetDeviceUUID.
func (mr *MockAccessTokenMockRecorder) SetDeviceUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceUUID", reflect.TypeOf((*MockAccessToken)(nil).SetDeviceUUID), arg0)
}

// SetDeviceUserAgent mocks base method.
func (m *MockAccessToken) SetDeviceUserAgent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceUserAgent", arg0)
}

// SetDeviceUserAgent indicates an expected call of SetDeviceUserAgent.
func (mr *MockAccessTokenMockRecorder) SetDeviceUserAgent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceUserAgent", reflect.TypeOf((*MockAccessToken)(nil).SetDeviceUserAgent), arg0)
}

// SetExpirationTime mocks base method.
func (m *MockAccessToken) SetExpirationTime(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExpirationTime", arg0)
}

// SetExpirationTime indicates an expected call of SetExpirationTime.
func (mr *MockAccessTokenMockRecorder) SetExpirationTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpirationTime", reflect.TypeOf((*MockAccessToken)(nil).SetExpirationTime), arg0)
}

// SetIssuedAt mocks base method.
func (m *MockAccessToken) SetIssuedAt(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIssuedAt", arg0)
}

// SetIssuedAt indicates an expected call of SetIssuedAt.
func (mr *MockAccessTokenMockRecorder) SetIssuedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuedAt", reflect.TypeOf((*MockAccessToken)(nil).SetIssuedAt), arg0)
}

// SetIssuer mocks base method.
func (m *MockAccessToken) SetIssuer(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIssuer", arg0)
}

// SetIssuer indicates an expected call of SetIssuer.
func (mr *MockAccessTokenMockRecorder) SetIssuer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuer", reflect.TypeOf((*MockAccessToken)(nil).SetIssuer), arg0)
}

// SetSubject mocks base method.
func (m *MockAccessToken) SetSubject(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubject", arg0)
}

// SetSubject indicates an expected call of SetSubject.
func (mr *MockAccessTokenMockRecorder) SetSubject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubject", reflect.TypeOf((*MockAccessToken)(nil).SetSubject), arg0)
}

// ToString mocks base method.
func (m *MockAccessToken) ToString() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToString indicates an expected call of ToString.
func (mr *MockAccessTokenMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockAccessToken)(nil).ToString))
}
