// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/tokens (interfaces: AccessTokenBuilder)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/tokens/mock_access_builder.go -package=tokens_mocks github.com/fromsi/jwt-oauth-sso/internal/tokens AccessTokenBuilder
//

// Package tokens_mocks is a generated GoMock package.
package tokens_mocks

import (
	reflect "reflect"

	tokens "github.com/fromsi/jwt-oauth-sso/internal/tokens"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessTokenBuilder is a mock of AccessTokenBuilder interface.
type MockAccessTokenBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenBuilderMockRecorder
	isgomock struct{}
}

// MockAccessTokenBuilderMockRecorder is the mock recorder for MockAccessTokenBuilder.
type MockAccessTokenBuilderMockRecorder struct {
	mock *MockAccessTokenBuilder
}

// NewMockAccessTokenBuilder creates a new mock instance.
func NewMockAccessTokenBuilder(ctrl *gomock.Controller) *MockAccessTokenBuilder {
	mock := &MockAccessTokenBuilder{ctrl: ctrl}
	mock.recorder = &MockAccessTokenBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenBuilder) EXPECT() *MockAccessTokenBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockAccessTokenBuilder) Build() (tokens.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(tokens.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockAccessTokenBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockAccessTokenBuilder)(nil).Build))
}

// BuildToJwt mocks base method.
func (m *MockAccessTokenBuilder) BuildToJwt() (*tokens.JwtAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildToJwt")
	ret0, _ := ret[0].(*tokens.JwtAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildToJwt indicates an expected call of BuildToJwt.
func (mr *MockAccessTokenBuilderMockRecorder) BuildToJwt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildToJwt", reflect.TypeOf((*MockAccessTokenBuilder)(nil).BuildToJwt))
}

// New mocks base method.
func (m *MockAccessTokenBuilder) New() tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockAccessTokenBuilderMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockAccessTokenBuilder)(nil).New))
}

// NewFromJwtString mocks base method.
func (m *MockAccessTokenBuilder) NewFromJwtString(arg0 string) (tokens.AccessTokenBuilder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFromJwtString", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFromJwtString indicates an expected call of NewFromJwtString.
func (mr *MockAccessTokenBuilderMockRecorder) NewFromJwtString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFromJwtString", reflect.TypeOf((*MockAccessTokenBuilder)(nil).NewFromJwtString), arg0)
}

// SetAudience mocks base method.
func (m *MockAccessTokenBuilder) SetAudience(arg0 string) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAudience", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetAudience indicates an expected call of SetAudience.
func (mr *MockAccessTokenBuilderMockRecorder) SetAudience(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAudience", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetAudience), arg0)
}

// SetDeviceUUID mocks base method.
func (m *MockAccessTokenBuilder) SetDeviceUUID(arg0 string) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeviceUUID", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetDeviceUUID indicates an expected call of SetDeviceUUID.
func (mr *MockAccessTokenBuilderMockRecorder) SetDeviceUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceUUID", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetDeviceUUID), arg0)
}

// SetDeviceUserAgent mocks base method.
func (m *MockAccessTokenBuilder) SetDeviceUserAgent(arg0 string) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeviceUserAgent", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetDeviceUserAgent indicates an expected call of SetDeviceUserAgent.
func (mr *MockAccessTokenBuilderMockRecorder) SetDeviceUserAgent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceUserAgent", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetDeviceUserAgent), arg0)
}

// SetExpirationTime mocks base method.
func (m *MockAccessTokenBuilder) SetExpirationTime(arg0 int) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpirationTime", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetExpirationTime indicates an expected call of SetExpirationTime.
func (mr *MockAccessTokenBuilderMockRecorder) SetExpirationTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpirationTime", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetExpirationTime), arg0)
}

// SetIssuedAt mocks base method.
func (m *MockAccessTokenBuilder) SetIssuedAt(arg0 int) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIssuedAt", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetIssuedAt indicates an expected call of SetIssuedAt.
func (mr *MockAccessTokenBuilderMockRecorder) SetIssuedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuedAt", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetIssuedAt), arg0)
}

// SetIssuer mocks base method.
func (m *MockAccessTokenBuilder) SetIssuer(arg0 string) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIssuer", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetIssuer indicates an expected call of SetIssuer.
func (mr *MockAccessTokenBuilderMockRecorder) SetIssuer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuer", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetIssuer), arg0)
}

// SetSubject mocks base method.
func (m *MockAccessTokenBuilder) SetSubject(arg0 string) tokens.AccessTokenBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubject", arg0)
	ret0, _ := ret[0].(tokens.AccessTokenBuilder)
	return ret0
}

// SetSubject indicates an expected call of SetSubject.
func (mr *MockAccessTokenBuilderMockRecorder) SetSubject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubject", reflect.TypeOf((*MockAccessTokenBuilder)(nil).SetSubject), arg0)
}
