// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: MutableDeviceRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/mock_mutable_device_repository.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories MutableDeviceRepository
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockMutableDeviceRepository is a mock of MutableDeviceRepository interface.
type MockMutableDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMutableDeviceRepositoryMockRecorder
	isgomock struct{}
}

// MockMutableDeviceRepositoryMockRecorder is the mock recorder for MockMutableDeviceRepository.
type MockMutableDeviceRepositoryMockRecorder struct {
	mock *MockMutableDeviceRepository
}

// NewMockMutableDeviceRepository creates a new mock instance.
func NewMockMutableDeviceRepository(ctrl *gomock.Controller) *MockMutableDeviceRepository {
	mock := &MockMutableDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockMutableDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableDeviceRepository) EXPECT() *MockMutableDeviceRepositoryMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockMutableDeviceRepository) CreateDevice(arg0 repositories.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockMutableDeviceRepositoryMockRecorder) CreateDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockMutableDeviceRepository)(nil).CreateDevice), arg0)
}

// DeleteAllDevicesByUserUUID mocks base method.
func (m *MockMutableDeviceRepository) DeleteAllDevicesByUserUUID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDevicesByUserUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllDevicesByUserUUID indicates an expected call of DeleteAllDevicesByUserUUID.
func (mr *MockMutableDeviceRepositoryMockRecorder) DeleteAllDevicesByUserUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDevicesByUserUUID", reflect.TypeOf((*MockMutableDeviceRepository)(nil).DeleteAllDevicesByUserUUID), arg0)
}

// DeleteDeviceByUUID mocks base method.
func (m *MockMutableDeviceRepository) DeleteDeviceByUUID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceByUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeviceByUUID indicates an expected call of DeleteDeviceByUUID.
func (mr *MockMutableDeviceRepositoryMockRecorder) DeleteDeviceByUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceByUUID", reflect.TypeOf((*MockMutableDeviceRepository)(nil).DeleteDeviceByUUID), arg0)
}

// DeleteDeviceByUUIDAndUserUUID mocks base method.
func (m *MockMutableDeviceRepository) DeleteDeviceByUUIDAndUserUUID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceByUUIDAndUserUUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeviceByUUIDAndUserUUID indicates an expected call of DeleteDeviceByUUIDAndUserUUID.
func (mr *MockMutableDeviceRepositoryMockRecorder) DeleteDeviceByUUIDAndUserUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceByUUIDAndUserUUID", reflect.TypeOf((*MockMutableDeviceRepository)(nil).DeleteDeviceByUUIDAndUserUUID), arg0, arg1)
}

// UpdateDevice mocks base method.
func (m *MockMutableDeviceRepository) UpdateDevice(arg0 repositories.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockMutableDeviceRepositoryMockRecorder) UpdateDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockMutableDeviceRepository)(nil).UpdateDevice), arg0)
}
