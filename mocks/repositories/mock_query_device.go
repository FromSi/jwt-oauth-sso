// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: QueryDevice)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/mock_query_device.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories QueryDevice
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	configs "github.com/fromsi/jwt-oauth-sso/internal/configs"
	tokens "github.com/fromsi/jwt-oauth-sso/internal/tokens"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryDevice is a mock of QueryDevice interface.
type MockQueryDevice struct {
	ctrl     *gomock.Controller
	recorder *MockQueryDeviceMockRecorder
	isgomock struct{}
}

// MockQueryDeviceMockRecorder is the mock recorder for MockQueryDevice.
type MockQueryDeviceMockRecorder struct {
	mock *MockQueryDevice
}

// NewMockQueryDevice creates a new mock instance.
func NewMockQueryDevice(ctrl *gomock.Controller) *MockQueryDevice {
	mock := &MockQueryDevice{ctrl: ctrl}
	mock.recorder = &MockQueryDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryDevice) EXPECT() *MockQueryDeviceMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockQueryDevice) GenerateAccessToken(arg0 configs.TokenConfig) (*tokens.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", arg0)
	ret0, _ := ret[0].(*tokens.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockQueryDeviceMockRecorder) GenerateAccessToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockQueryDevice)(nil).GenerateAccessToken), arg0)
}

// GetCreatedAt mocks base method.
func (m *MockQueryDevice) GetCreatedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockQueryDeviceMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockQueryDevice)(nil).GetCreatedAt))
}

// GetExpiresAt mocks base method.
func (m *MockQueryDevice) GetExpiresAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiresAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpiresAt indicates an expected call of GetExpiresAt.
func (mr *MockQueryDeviceMockRecorder) GetExpiresAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiresAt", reflect.TypeOf((*MockQueryDevice)(nil).GetExpiresAt))
}

// GetIp mocks base method.
func (m *MockQueryDevice) GetIp() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIp")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIp indicates an expected call of GetIp.
func (mr *MockQueryDeviceMockRecorder) GetIp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIp", reflect.TypeOf((*MockQueryDevice)(nil).GetIp))
}

// GetRefreshToken mocks base method.
func (m *MockQueryDevice) GetRefreshToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockQueryDeviceMockRecorder) GetRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockQueryDevice)(nil).GetRefreshToken))
}

// GetUUID mocks base method.
func (m *MockQueryDevice) GetUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockQueryDeviceMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockQueryDevice)(nil).GetUUID))
}

// GetUpdatedAt mocks base method.
func (m *MockQueryDevice) GetUpdatedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockQueryDeviceMockRecorder) GetUpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockQueryDevice)(nil).GetUpdatedAt))
}

// GetUserAgent mocks base method.
func (m *MockQueryDevice) GetUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAgent indicates an expected call of GetUserAgent.
func (mr *MockQueryDeviceMockRecorder) GetUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgent", reflect.TypeOf((*MockQueryDevice)(nil).GetUserAgent))
}

// GetUserUUID mocks base method.
func (m *MockQueryDevice) GetUserUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserUUID indicates an expected call of GetUserUUID.
func (mr *MockQueryDeviceMockRecorder) GetUserUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUID", reflect.TypeOf((*MockQueryDevice)(nil).GetUserUUID))
}
