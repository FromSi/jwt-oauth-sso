// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: UserBuilder)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/mock_user_builder.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories UserBuilder
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockUserBuilder is a mock of UserBuilder interface.
type MockUserBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockUserBuilderMockRecorder
	isgomock struct{}
}

// MockUserBuilderMockRecorder is the mock recorder for MockUserBuilder.
type MockUserBuilderMockRecorder struct {
	mock *MockUserBuilder
}

// NewMockUserBuilder creates a new mock instance.
func NewMockUserBuilder(ctrl *gomock.Controller) *MockUserBuilder {
	mock := &MockUserBuilder{ctrl: ctrl}
	mock.recorder = &MockUserBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBuilder) EXPECT() *MockUserBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockUserBuilder) Build() (repositories.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(repositories.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockUserBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockUserBuilder)(nil).Build))
}

// BuildToGorm mocks base method.
func (m *MockUserBuilder) BuildToGorm() (*repositories.GormUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildToGorm")
	ret0, _ := ret[0].(*repositories.GormUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildToGorm indicates an expected call of BuildToGorm.
func (mr *MockUserBuilderMockRecorder) BuildToGorm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildToGorm", reflect.TypeOf((*MockUserBuilder)(nil).BuildToGorm))
}

// New mocks base method.
func (m *MockUserBuilder) New() repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockUserBuilderMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUserBuilder)(nil).New))
}

// NewFromUser mocks base method.
func (m *MockUserBuilder) NewFromUser(arg0 repositories.User) repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFromUser", arg0)
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// NewFromUser indicates an expected call of NewFromUser.
func (mr *MockUserBuilderMockRecorder) NewFromUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFromUser", reflect.TypeOf((*MockUserBuilder)(nil).NewFromUser), arg0)
}

// SetCreatedAt mocks base method.
func (m *MockUserBuilder) SetCreatedAt(arg0 int) repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCreatedAt", arg0)
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// SetCreatedAt indicates an expected call of SetCreatedAt.
func (mr *MockUserBuilderMockRecorder) SetCreatedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatedAt", reflect.TypeOf((*MockUserBuilder)(nil).SetCreatedAt), arg0)
}

// SetEmail mocks base method.
func (m *MockUserBuilder) SetEmail(arg0 string) repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmail", arg0)
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// SetEmail indicates an expected call of SetEmail.
func (mr *MockUserBuilderMockRecorder) SetEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmail", reflect.TypeOf((*MockUserBuilder)(nil).SetEmail), arg0)
}

// SetPassword mocks base method.
func (m *MockUserBuilder) SetPassword(arg0 string) repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", arg0)
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockUserBuilderMockRecorder) SetPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockUserBuilder)(nil).SetPassword), arg0)
}

// SetUUID mocks base method.
func (m *MockUserBuilder) SetUUID(arg0 string) repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUUID", arg0)
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// SetUUID indicates an expected call of SetUUID.
func (mr *MockUserBuilderMockRecorder) SetUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUUID", reflect.TypeOf((*MockUserBuilder)(nil).SetUUID), arg0)
}

// SetUpdatedAt mocks base method.
func (m *MockUserBuilder) SetUpdatedAt(arg0 int) repositories.UserBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdatedAt", arg0)
	ret0, _ := ret[0].(repositories.UserBuilder)
	return ret0
}

// SetUpdatedAt indicates an expected call of SetUpdatedAt.
func (mr *MockUserBuilderMockRecorder) SetUpdatedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatedAt", reflect.TypeOf((*MockUserBuilder)(nil).SetUpdatedAt), arg0)
}
