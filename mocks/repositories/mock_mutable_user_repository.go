// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: MutableUserRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/mock_mutable_user_repository.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories MutableUserRepository
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockMutableUserRepository is a mock of MutableUserRepository interface.
type MockMutableUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMutableUserRepositoryMockRecorder
	isgomock struct{}
}

// MockMutableUserRepositoryMockRecorder is the mock recorder for MockMutableUserRepository.
type MockMutableUserRepositoryMockRecorder struct {
	mock *MockMutableUserRepository
}

// NewMockMutableUserRepository creates a new mock instance.
func NewMockMutableUserRepository(ctrl *gomock.Controller) *MockMutableUserRepository {
	mock := &MockMutableUserRepository{ctrl: ctrl}
	mock.recorder = &MockMutableUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableUserRepository) EXPECT() *MockMutableUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMutableUserRepository) CreateUser(arg0 repositories.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMutableUserRepositoryMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMutableUserRepository)(nil).CreateUser), arg0)
}

// UpdatePasswordByUUIDAndPasswordAndUpdatedAt mocks base method.
func (m *MockMutableUserRepository) UpdatePasswordByUUIDAndPasswordAndUpdatedAt(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByUUIDAndPasswordAndUpdatedAt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByUUIDAndPasswordAndUpdatedAt indicates an expected call of UpdatePasswordByUUIDAndPasswordAndUpdatedAt.
func (mr *MockMutableUserRepositoryMockRecorder) UpdatePasswordByUUIDAndPasswordAndUpdatedAt(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByUUIDAndPasswordAndUpdatedAt", reflect.TypeOf((*MockMutableUserRepository)(nil).UpdatePasswordByUUIDAndPasswordAndUpdatedAt), arg0, arg1, arg2)
}
