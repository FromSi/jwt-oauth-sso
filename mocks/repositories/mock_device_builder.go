// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: DeviceBuilder)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/mock_device_builder.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories DeviceBuilder
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceBuilder is a mock of DeviceBuilder interface.
type MockDeviceBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceBuilderMockRecorder
	isgomock struct{}
}

// MockDeviceBuilderMockRecorder is the mock recorder for MockDeviceBuilder.
type MockDeviceBuilderMockRecorder struct {
	mock *MockDeviceBuilder
}

// NewMockDeviceBuilder creates a new mock instance.
func NewMockDeviceBuilder(ctrl *gomock.Controller) *MockDeviceBuilder {
	mock := &MockDeviceBuilder{ctrl: ctrl}
	mock.recorder = &MockDeviceBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceBuilder) EXPECT() *MockDeviceBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDeviceBuilder) Build() (repositories.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(repositories.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockDeviceBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDeviceBuilder)(nil).Build))
}

// BuildToGorm mocks base method.
func (m *MockDeviceBuilder) BuildToGorm() (*repositories.GormDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildToGorm")
	ret0, _ := ret[0].(*repositories.GormDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildToGorm indicates an expected call of BuildToGorm.
func (mr *MockDeviceBuilderMockRecorder) BuildToGorm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildToGorm", reflect.TypeOf((*MockDeviceBuilder)(nil).BuildToGorm))
}

// New mocks base method.
func (m *MockDeviceBuilder) New() repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockDeviceBuilderMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockDeviceBuilder)(nil).New))
}

// NewFromDevice mocks base method.
func (m *MockDeviceBuilder) NewFromDevice(arg0 repositories.Device) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFromDevice", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// NewFromDevice indicates an expected call of NewFromDevice.
func (mr *MockDeviceBuilderMockRecorder) NewFromDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFromDevice", reflect.TypeOf((*MockDeviceBuilder)(nil).NewFromDevice), arg0)
}

// SetCreatedAt mocks base method.
func (m *MockDeviceBuilder) SetCreatedAt(arg0 int) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCreatedAt", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetCreatedAt indicates an expected call of SetCreatedAt.
func (mr *MockDeviceBuilderMockRecorder) SetCreatedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatedAt", reflect.TypeOf((*MockDeviceBuilder)(nil).SetCreatedAt), arg0)
}

// SetExpiresAt mocks base method.
func (m *MockDeviceBuilder) SetExpiresAt(arg0 int) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpiresAt", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetExpiresAt indicates an expected call of SetExpiresAt.
func (mr *MockDeviceBuilderMockRecorder) SetExpiresAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpiresAt", reflect.TypeOf((*MockDeviceBuilder)(nil).SetExpiresAt), arg0)
}

// SetIp mocks base method.
func (m *MockDeviceBuilder) SetIp(arg0 string) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIp", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetIp indicates an expected call of SetIp.
func (mr *MockDeviceBuilderMockRecorder) SetIp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIp", reflect.TypeOf((*MockDeviceBuilder)(nil).SetIp), arg0)
}

// SetIssuedAt mocks base method.
func (m *MockDeviceBuilder) SetIssuedAt(arg0 int) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIssuedAt", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetIssuedAt indicates an expected call of SetIssuedAt.
func (mr *MockDeviceBuilderMockRecorder) SetIssuedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuedAt", reflect.TypeOf((*MockDeviceBuilder)(nil).SetIssuedAt), arg0)
}

// SetRefreshToken mocks base method.
func (m *MockDeviceBuilder) SetRefreshToken(arg0 string) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefreshToken", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetRefreshToken indicates an expected call of SetRefreshToken.
func (mr *MockDeviceBuilderMockRecorder) SetRefreshToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshToken", reflect.TypeOf((*MockDeviceBuilder)(nil).SetRefreshToken), arg0)
}

// SetUUID mocks base method.
func (m *MockDeviceBuilder) SetUUID(arg0 string) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUUID", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetUUID indicates an expected call of SetUUID.
func (mr *MockDeviceBuilderMockRecorder) SetUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUUID", reflect.TypeOf((*MockDeviceBuilder)(nil).SetUUID), arg0)
}

// SetUpdatedAt mocks base method.
func (m *MockDeviceBuilder) SetUpdatedAt(arg0 int) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdatedAt", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetUpdatedAt indicates an expected call of SetUpdatedAt.
func (mr *MockDeviceBuilderMockRecorder) SetUpdatedAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatedAt", reflect.TypeOf((*MockDeviceBuilder)(nil).SetUpdatedAt), arg0)
}

// SetUserAgent mocks base method.
func (m *MockDeviceBuilder) SetUserAgent(arg0 string) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAgent", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetUserAgent indicates an expected call of SetUserAgent.
func (mr *MockDeviceBuilderMockRecorder) SetUserAgent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockDeviceBuilder)(nil).SetUserAgent), arg0)
}

// SetUserUUID mocks base method.
func (m *MockDeviceBuilder) SetUserUUID(arg0 string) repositories.DeviceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserUUID", arg0)
	ret0, _ := ret[0].(repositories.DeviceBuilder)
	return ret0
}

// SetUserUUID indicates an expected call of SetUserUUID.
func (mr *MockDeviceBuilderMockRecorder) SetUserUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserUUID", reflect.TypeOf((*MockDeviceBuilder)(nil).SetUserUUID), arg0)
}
