// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/repositories (interfaces: QueryUser)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/mock_query_user.go -package=repositories_mocks github.com/fromsi/jwt-oauth-sso/internal/repositories QueryUser
//

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryUser is a mock of QueryUser interface.
type MockQueryUser struct {
	ctrl     *gomock.Controller
	recorder *MockQueryUserMockRecorder
	isgomock struct{}
}

// MockQueryUserMockRecorder is the mock recorder for MockQueryUser.
type MockQueryUserMockRecorder struct {
	mock *MockQueryUser
}

// NewMockQueryUser creates a new mock instance.
func NewMockQueryUser(ctrl *gomock.Controller) *MockQueryUser {
	mock := &MockQueryUser{ctrl: ctrl}
	mock.recorder = &MockQueryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryUser) EXPECT() *MockQueryUserMockRecorder {
	return m.recorder
}

// GetCreatedAt mocks base method.
func (m *MockQueryUser) GetCreatedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockQueryUserMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockQueryUser)(nil).GetCreatedAt))
}

// GetEmail mocks base method.
func (m *MockQueryUser) GetEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockQueryUserMockRecorder) GetEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockQueryUser)(nil).GetEmail))
}

// GetPassword mocks base method.
func (m *MockQueryUser) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockQueryUserMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockQueryUser)(nil).GetPassword))
}

// GetUUID mocks base method.
func (m *MockQueryUser) GetUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockQueryUserMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockQueryUser)(nil).GetUUID))
}

// GetUpdatedAt mocks base method.
func (m *MockQueryUser) GetUpdatedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockQueryUserMockRecorder) GetUpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockQueryUser)(nil).GetUpdatedAt))
}
