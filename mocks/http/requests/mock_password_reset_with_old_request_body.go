// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/http/requests (interfaces: PasswordResetWithOldRequestBody)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/http/requests/mock_password_reset_with_old_request_body.go -package=requests_mocks github.com/fromsi/jwt-oauth-sso/internal/http/requests PasswordResetWithOldRequestBody
//

// Package requests_mocks is a generated GoMock package.
package requests_mocks

import (
	reflect "reflect"

	requests "github.com/fromsi/jwt-oauth-sso/internal/http/requests"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockPasswordResetWithOldRequestBody is a mock of PasswordResetWithOldRequestBody interface.
type MockPasswordResetWithOldRequestBody struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetWithOldRequestBodyMockRecorder
	isgomock struct{}
}

// MockPasswordResetWithOldRequestBodyMockRecorder is the mock recorder for MockPasswordResetWithOldRequestBody.
type MockPasswordResetWithOldRequestBodyMockRecorder struct {
	mock *MockPasswordResetWithOldRequestBody
}

// NewMockPasswordResetWithOldRequestBody creates a new mock instance.
func NewMockPasswordResetWithOldRequestBody(ctrl *gomock.Controller) *MockPasswordResetWithOldRequestBody {
	mock := &MockPasswordResetWithOldRequestBody{ctrl: ctrl}
	mock.recorder = &MockPasswordResetWithOldRequestBodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetWithOldRequestBody) EXPECT() *MockPasswordResetWithOldRequestBodyMockRecorder {
	return m.recorder
}

// GetNewPassword mocks base method.
func (m *MockPasswordResetWithOldRequestBody) GetNewPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNewPassword indicates an expected call of GetNewPassword.
func (mr *MockPasswordResetWithOldRequestBodyMockRecorder) GetNewPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPassword", reflect.TypeOf((*MockPasswordResetWithOldRequestBody)(nil).GetNewPassword))
}

// GetOldPassword mocks base method.
func (m *MockPasswordResetWithOldRequestBody) GetOldPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOldPassword indicates an expected call of GetOldPassword.
func (mr *MockPasswordResetWithOldRequestBodyMockRecorder) GetOldPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldPassword", reflect.TypeOf((*MockPasswordResetWithOldRequestBody)(nil).GetOldPassword))
}

// Make mocks base method.
func (m *MockPasswordResetWithOldRequestBody) Make(arg0 *gin.Context) (requests.PasswordResetWithOldRequestBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Make", arg0)
	ret0, _ := ret[0].(requests.PasswordResetWithOldRequestBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Make indicates an expected call of Make.
func (mr *MockPasswordResetWithOldRequestBodyMockRecorder) Make(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockPasswordResetWithOldRequestBody)(nil).Make), arg0)
}
