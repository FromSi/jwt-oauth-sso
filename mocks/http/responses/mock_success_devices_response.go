// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/jwt-oauth-sso/internal/http/responses (interfaces: SuccessDevicesResponse)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/http/responses/mock_success_devices_response.go -package=responses_mocks github.com/fromsi/jwt-oauth-sso/internal/http/responses SuccessDevicesResponse
//

// Package responses_mocks is a generated GoMock package.
package responses_mocks

import (
	reflect "reflect"

	responses "github.com/fromsi/jwt-oauth-sso/internal/http/responses"
	repositories "github.com/fromsi/jwt-oauth-sso/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockSuccessDevicesResponse is a mock of SuccessDevicesResponse interface.
type MockSuccessDevicesResponse struct {
	ctrl     *gomock.Controller
	recorder *MockSuccessDevicesResponseMockRecorder
	isgomock struct{}
}

// MockSuccessDevicesResponseMockRecorder is the mock recorder for MockSuccessDevicesResponse.
type MockSuccessDevicesResponseMockRecorder struct {
	mock *MockSuccessDevicesResponse
}

// NewMockSuccessDevicesResponse creates a new mock instance.
func NewMockSuccessDevicesResponse(ctrl *gomock.Controller) *MockSuccessDevicesResponse {
	mock := &MockSuccessDevicesResponse{ctrl: ctrl}
	mock.recorder = &MockSuccessDevicesResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuccessDevicesResponse) EXPECT() *MockSuccessDevicesResponseMockRecorder {
	return m.recorder
}

// Make mocks base method.
func (m *MockSuccessDevicesResponse) Make(arg0 []repositories.Device) responses.SuccessDevicesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Make", arg0)
	ret0, _ := ret[0].(responses.SuccessDevicesResponse)
	return ret0
}

// Make indicates an expected call of Make.
func (mr *MockSuccessDevicesResponseMockRecorder) Make(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockSuccessDevicesResponse)(nil).Make), arg0)
}
